-- 24 Aug
start transaction;
select * from CUSTOMERS;
INSERT INTO CUSTOMERS VALUES (2, 'XYZ', 'XYZ@GMAIL.COM', 'Y');
rollback;
commit;

-- Primary Key
CREATE TABLE STUDENTS (
	ID INTEGER AUTO_INCREMENT,
    NAME VARCHAR(50),
    AGE NUMERIC(3),
    PRIMARY KEY(ID)
);

INSERT INTO STUDENTS (NAME, AGE)VALUES ('JOHN',23);
INSERT INTO STUDENTS (NAME, AGE)VALUES ('MARY',18);
SELECT * FROM STUDENTS;

INSERT INTO SUBJECTS (NAME) VALUES ('ENGLISH');
INSERT INTO SUBJECTS (NAME) VALUES ('HISTORY');
INSERT INTO SUBJECTS (NAME) VALUES ('MATHS');

CREATE TABLE SUBJECTS (
	ID INTEGER AUTO_INCREMENT,
    NAME VARCHAR(50),
    PRIMARY KEY(ID)
);

-- DDL
DROP TABLE STUDENT_SUBJECTS;
CREATE TABLE STUDENT_SUBJECTS (
	ID INTEGER AUTO_INCREMENT,
    STUDENT_ID INTEGER NOT NULL,
    SUBJECT_ID INTEGER NOT NULL,
    PRIMARY KEY(ID),
    FOREIGN KEY(STUDENT_ID) REFERENCES STUDENTS(ID),
    FOREIGN KEY(SUBJECT_ID) REFERENCES SUBJECTS(ID)
);

-- DML
INSERT INTO STUDENT_SUBJECTS (STUDENT_ID, SUBJECT_ID) VALUES (1,2);
INSERT INTO STUDENT_SUBJECTS (STUDENT_ID, SUBJECT_ID) VALUES (1,3);
INSERT INTO STUDENT_SUBJECTS (STUDENT_ID, SUBJECT_ID) VALUES (2,2);
SELECT * FROM STUDENT_SUBJECTS;
-- ERROR, FOREIGN KEY CONSTRAINT FAILS
-- INSERT INTO STUDENT_SUBJECTS (STUDENT_ID, SUBJECT_ID) VALUES (2,4);

-- TRUNCATE (DELECTE ALL DATA FROM TABLE)
TRUNCATE TABLE STUDENT_SUBJECTS;
SELECT * FROM STUDENT_SUBJECTS;

-- ALTER ADD/ DROP COLUMN (DDL)
ALTER TABLE STUDENTS ADD EMAIL VARCHAR(50); -- DEFAULT NULL VALUE TO EXISTING RECORDS
ALTER TABLE STUDENTS DROP EMAIL;
SELECT * FROM STUDENTS;

-- ALTER COLUMN DEFINITION
ALTER TABLE STUDENTS MODIFY EMAIL VARCHAR(60);
-- ERROR IF DATA LENGTH EXCEED THE NEW COLUMN LENGTH
ALTER TABLE STUDENTS MODIFY EMAIL VARCHAR(55); 

-- ON DELETE CASECADE
TRUNCATE TABLE DEPARTMENT;
CREATE TABLE DEPARTMENT (
	ID INTEGER PRIMARY KEY AUTO_INCREMENT,
    DEPT_NAME  VARCHAR(50) NOT NULL
);

INSERT INTO DEPARTMENT (DEPT_NAME) VALUES ('CS');
INSERT INTO DEPARTMENT (DEPT_NAME) VALUES ('MARKETING');

-- ONE TO MANY
CREATE TABLE COURSE (
	ID INTEGER PRIMARY KEY AUTO_INCREMENT,
    COURSE_NAME  VARCHAR(50) NOT NULL,
    COURSE_CODE  VARCHAR(5) NOT NULL,
    DEPT_ID INTEGER ,
    FOREIGN KEY(DEPT_ID) REFERENCES DEPARTMENT(ID) ON DELETE SET NULL
    -- FOREIGN KEY(DEPT_ID) REFERENCES DEPARTMENT(ID) ON DELETE CASCADE -- deleted related with father column
    -- DELETE CASCADE -- EVEN FATHER TABLE DIED, SON TABLE ALSO SURVIVE -- NOT SUPPOSE TO USE -- deleted related with father row 
    -- so we don't know what we are deleted when we deleted father table, and can't prove and trace 
);

DROP TABLE COURSE;
TRUNCATE TABLE COURSE;
INSERT INTO COURSE (COURSE_NAME, COURSE_CODE, DEPT_ID) VALUES ('JAVA', 'CS001', 1);
INSERT INTO COURSE (COURSE_NAME, COURSE_CODE, DEPT_ID) VALUES ('THEORY', 'MT001', 2);
-- INSERT INTO COURSE (COURSE_NAME, COURSE_CODE, DEPT_ID) VALUES ('THEORY', 'MT001', 3);

-- DELETE PARENT (DEPARTMENT)
DELETE FROM COURSE WHERE DEPT_ID = 2; -- MORE CLEAR
DELETE FROM DEPARTMENT WHERE ID = 2; -- SUCCESS
SELECT * FROM DEPARTMENT; 
SELECT * FROM COURSE; 

-- RENAME COLUMN
-- ALTER TABLE COURSE RENAME COLUMN COURSE_NAME TO NAME;

ALTER TABLE COURSE ADD COLUMN START_DATE DATE DEFAULT NULL;
ALTER TABLE COURSE ADD COLUMN END_DATE DATE DEFAULT '1900-01-01';

-- MODIFY AND DEFAULT
INSERT INTO COURSE VALUES (3,'PYTHON', 'CS002', 1, NULL, NULL);
ALTER TABLE COURSE MODIFY COLUMN END_DATE DATETIME DEFAULT '1900-01-01 00:00:00'; -- NULL STILL NULL, DEFAULT VALUES WOULD CHANGE

-- LIMIT (ORDER BY)
SELECT * FROM COURSE ORDER BY ID  LIMIT 2 ; -- NORMALLY ORDER BY + LIMIT TO SELECT SOMETHING

-- OFFSET
SELECT * FROM COURSE ORDER BY ID LIMIT 2 OFFSET 1; -- SKIP 1 ROW

-- EXISTS / NOT EXISTS
INSERT INTO DEPARTMENT (DEPT_NAME) VALUES ('HR');
INSERT INTO DEPARTMENT (DEPT_NAME) VALUES ('SALES');
INSERT INTO DEPARTMENT (DEPT_NAME) VALUES ('ENG');
INSERT INTO DEPARTMENT (DEPT_NAME) VALUES ('CVIL');


-- EXISTS
SELECT D.*
FROM DEPARTMENT D
WHERE exists ( -- CHECK IF D.ID EXISTS IN COURSE'S DEPT_ID (CHECK ALL ROWS)
	SELECT 1
    FROM COURSE C
    WHERE C.DEPT_ID = D.ID -- KEY
);
-- WE CAN AND / OR -> EXISTS / NOT EXISTS

SELECT D.*, D2.*
FROM DEPARTMENT D, DEPARTMENT D2
WHERE NOT exists ( -- CHECK IF D.ID EXISTS IN COURSE'S DEPT_ID (CHECK ALL ROWS)    EXISTS -> BOOLEAN
	SELECT 1
    FROM COURSE C
    WHERE C.DEPT_ID = D.ID -- KEY
)
AND D.ID = D2.ID;

SELECT C.*
FROM COURSE C
WHERE NOT exists ( -- CHECK IF D.ID EXISTS IN COURSE'S DEPT_ID (CHECK ALL ROWS)    EXISTS -> BOOLEAN
	SELECT 1
    FROM DEPARTMENT D
    WHERE D.ID = C.DEPT_ID  -- KEY
);

SELECT D.* -- DUPLICATE, EXISTS / INNER JOIN TABLE
FROM DEPARTMENT D,COURSE C 
WHERE exists ( -- CHECK IF D.ID EXISTS IN COURSE'S DEPT_ID (CHECK ALL ROWS)
	SELECT 1
    FROM COURSE C
    WHERE C.DEPT_ID = D.ID -- KEY
);



